// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/MessageContainer.proto

#ifndef PROTOBUF_INCLUDED_proto_2fMessageContainer_2eproto
#define PROTOBUF_INCLUDED_proto_2fMessageContainer_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ActionMap.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fMessageContainer_2eproto

namespace protobuf_proto_2fMessageContainer_2eproto {
// Internal implementation detail -- do not use these members.
    struct TableStruct {
        static const ::google::protobuf::internal::ParseTableField entries[];
        static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
        static const ::google::protobuf::internal::ParseTable schema[7];
        static const ::google::protobuf::internal::FieldMetadata field_metadata[];
        static const ::google::protobuf::internal::SerializationTable serialization_table[];
        static const ::google::protobuf::uint32 offsets[];
    };

    void AddDescriptors();
}  // namespace protobuf_proto_2fMessageContainer_2eproto
namespace proto {
    class Ack;

    class AckDefaultTypeInternal;

    extern AckDefaultTypeInternal _Ack_default_instance_;

    class InternalMessageContainer;

    class InternalMessageContainerDefaultTypeInternal;

    extern InternalMessageContainerDefaultTypeInternal _InternalMessageContainer_default_instance_;

    class InternalMessageContainer_Header;

    class InternalMessageContainer_HeaderDefaultTypeInternal;

    extern InternalMessageContainer_HeaderDefaultTypeInternal _InternalMessageContainer_Header_default_instance_;

    class MessageContainer;

    class MessageContainerDefaultTypeInternal;

    extern MessageContainerDefaultTypeInternal _MessageContainer_default_instance_;

    class MessageContainer_Header;

    class MessageContainer_HeaderDefaultTypeInternal;

    extern MessageContainer_HeaderDefaultTypeInternal _MessageContainer_Header_default_instance_;

    class Ping;

    class PingDefaultTypeInternal;

    extern PingDefaultTypeInternal _Ping_default_instance_;

    class Pong;

    class PongDefaultTypeInternal;

    extern PongDefaultTypeInternal _Pong_default_instance_;
}  // namespace proto
namespace google {
    namespace protobuf {
        template <>
        ::proto::Ack *Arena::CreateMaybeMessage <::proto::Ack>(Arena *);

        template <>
        ::proto::InternalMessageContainer *Arena::CreateMaybeMessage <::proto::InternalMessageContainer>(Arena *);

        template <>
        ::proto::InternalMessageContainer_Header *Arena::CreateMaybeMessage <::proto::InternalMessageContainer_Header>(Arena *);

        template <>
        ::proto::MessageContainer *Arena::CreateMaybeMessage <::proto::MessageContainer>(Arena *);

        template <>
        ::proto::MessageContainer_Header *Arena::CreateMaybeMessage <::proto::MessageContainer_Header>(Arena *);

        template <>
        ::proto::Ping *Arena::CreateMaybeMessage <::proto::Ping>(Arena *);

        template <>
        ::proto::Pong *Arena::CreateMaybeMessage <::proto::Pong>(Arena *);
    }  // namespace protobuf
}  // namespace google
namespace proto {

// ===================================================================

    class MessageContainer_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MessageContainer.Header) */ {
    public:
        MessageContainer_Header();

        virtual ~MessageContainer_Header();

        MessageContainer_Header(const MessageContainer_Header &from);

        inline MessageContainer_Header &operator=(const MessageContainer_Header &from) {
            CopyFrom(from);
            return *this;
        }

#if LANG_CXX11

        MessageContainer_Header(MessageContainer_Header &&from) noexcept
                : MessageContainer_Header() {
            *this = ::std::move(from);
        }

        inline MessageContainer_Header &operator=(MessageContainer_Header &&from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

#endif

        static const ::google::protobuf::Descriptor *descriptor();

        static const MessageContainer_Header &default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const MessageContainer_Header *internal_default_instance() {
            return reinterpret_cast<const MessageContainer_Header *>(
                    &_MessageContainer_Header_default_instance_);
        }

        static constexpr int kIndexInFileMessages =
                0;

        void Swap(MessageContainer_Header *other);

        friend void swap(MessageContainer_Header &a, MessageContainer_Header &b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline MessageContainer_Header *New() const final {
            return CreateMaybeMessage <MessageContainer_Header>(NULL);
        }

        MessageContainer_Header *New(::google::protobuf::Arena *arena) const final {
            return CreateMaybeMessage <MessageContainer_Header>(arena);
        }

        void CopyFrom(const ::google::protobuf::Message &from) final;

        void MergeFrom(const ::google::protobuf::Message &from) final;

        void CopyFrom(const MessageContainer_Header &from);

        void MergeFrom(const MessageContainer_Header &from);

        void Clear() final;

        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;

        bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream *input) final;

        void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream *output) const final;

        ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
                bool deterministic, ::google::protobuf::uint8 *target) const final;

        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();

        void SharedDtor();

        void SetCachedSize(int size) const final;

        void InternalSwap(MessageContainer_Header *other);

    private:
        inline ::google::protobuf::Arena *GetArenaNoVirtual() const {
            return NULL;
        }

        inline void *MaybeArenaPtr() const {
            return NULL;
        }

    public:

        ::google::protobuf::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // string id = 1;
        void clear_id();

        static const int kIdFieldNumber = 1;

        const ::std::string &id() const;

        void set_id(const ::std::string &value);

#if LANG_CXX11

        void set_id(::std::string &&value);

#endif

        void set_id(const char *value);

        void set_id(const char *value, size_t size);

        ::std::string *mutable_id();

        ::std::string *release_id();

        void set_allocated_id(::std::string *id);

        // .proto.ActionMap actionId = 2;
        void clear_actionid();

        static const int kActionIdFieldNumber = 2;

        ::proto::ActionMap actionid() const;

        void set_actionid(::proto::ActionMap value);

        // @@protoc_insertion_point(class_scope:proto.MessageContainer.Header)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        ::google::protobuf::internal::ArenaStringPtr id_;
        int actionid_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        friend struct ::protobuf_proto_2fMessageContainer_2eproto::TableStruct;
    };
// -------------------------------------------------------------------

    class MessageContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MessageContainer) */ {
    public:
        MessageContainer();

        virtual ~MessageContainer();

        MessageContainer(const MessageContainer &from);

        inline MessageContainer &operator=(const MessageContainer &from) {
            CopyFrom(from);
            return *this;
        }

#if LANG_CXX11

        MessageContainer(MessageContainer &&from) noexcept
                : MessageContainer() {
            *this = ::std::move(from);
        }

        inline MessageContainer &operator=(MessageContainer &&from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

#endif

        static const ::google::protobuf::Descriptor *descriptor();

        static const MessageContainer &default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const MessageContainer *internal_default_instance() {
            return reinterpret_cast<const MessageContainer *>(
                    &_MessageContainer_default_instance_);
        }

        static constexpr int kIndexInFileMessages =
                1;

        void Swap(MessageContainer *other);

        friend void swap(MessageContainer &a, MessageContainer &b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline MessageContainer *New() const final {
            return CreateMaybeMessage <MessageContainer>(NULL);
        }

        MessageContainer *New(::google::protobuf::Arena *arena) const final {
            return CreateMaybeMessage <MessageContainer>(arena);
        }

        void CopyFrom(const ::google::protobuf::Message &from) final;

        void MergeFrom(const ::google::protobuf::Message &from) final;

        void CopyFrom(const MessageContainer &from);

        void MergeFrom(const MessageContainer &from);

        void Clear() final;

        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;

        bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream *input) final;

        void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream *output) const final;

        ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
                bool deterministic, ::google::protobuf::uint8 *target) const final;

        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();

        void SharedDtor();

        void SetCachedSize(int size) const final;

        void InternalSwap(MessageContainer *other);

    private:
        inline ::google::protobuf::Arena *GetArenaNoVirtual() const {
            return NULL;
        }

        inline void *MaybeArenaPtr() const {
            return NULL;
        }

    public:

        ::google::protobuf::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        typedef MessageContainer_Header Header;

        // accessors -------------------------------------------------------

        // bytes message = 3;
        void clear_message();

        static const int kMessageFieldNumber = 3;

        const ::std::string &message() const;

        void set_message(const ::std::string &value);

#if LANG_CXX11

        void set_message(::std::string &&value);

#endif

        void set_message(const char *value);

        void set_message(const void *value, size_t size);

        ::std::string *mutable_message();

        ::std::string *release_message();

        void set_allocated_message(::std::string *message);

        // .proto.MessageContainer.Header header = 2;
        bool has_header() const;

        void clear_header();

        static const int kHeaderFieldNumber = 2;
    private:
        const ::proto::MessageContainer_Header &_internal_header() const;

    public:
        const ::proto::MessageContainer_Header &header() const;

        ::proto::MessageContainer_Header *release_header();

        ::proto::MessageContainer_Header *mutable_header();

        void set_allocated_header(::proto::MessageContainer_Header *header);

        // @@protoc_insertion_point(class_scope:proto.MessageContainer)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        ::google::protobuf::internal::ArenaStringPtr message_;
        ::proto::MessageContainer_Header *header_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        friend struct ::protobuf_proto_2fMessageContainer_2eproto::TableStruct;
    };
// -------------------------------------------------------------------

    class InternalMessageContainer_Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InternalMessageContainer.Header) */ {
    public:
        InternalMessageContainer_Header();

        virtual ~InternalMessageContainer_Header();

        InternalMessageContainer_Header(const InternalMessageContainer_Header &from);

        inline InternalMessageContainer_Header &operator=(const InternalMessageContainer_Header &from) {
            CopyFrom(from);
            return *this;
        }

#if LANG_CXX11

        InternalMessageContainer_Header(InternalMessageContainer_Header &&from) noexcept
                : InternalMessageContainer_Header() {
            *this = ::std::move(from);
        }

        inline InternalMessageContainer_Header &operator=(InternalMessageContainer_Header &&from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

#endif

        static const ::google::protobuf::Descriptor *descriptor();

        static const InternalMessageContainer_Header &default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const InternalMessageContainer_Header *internal_default_instance() {
            return reinterpret_cast<const InternalMessageContainer_Header *>(
                    &_InternalMessageContainer_Header_default_instance_);
        }

        static constexpr int kIndexInFileMessages =
                2;

        void Swap(InternalMessageContainer_Header *other);

        friend void swap(InternalMessageContainer_Header &a, InternalMessageContainer_Header &b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline InternalMessageContainer_Header *New() const final {
            return CreateMaybeMessage <InternalMessageContainer_Header>(NULL);
        }

        InternalMessageContainer_Header *New(::google::protobuf::Arena *arena) const final {
            return CreateMaybeMessage <InternalMessageContainer_Header>(arena);
        }

        void CopyFrom(const ::google::protobuf::Message &from) final;

        void MergeFrom(const ::google::protobuf::Message &from) final;

        void CopyFrom(const InternalMessageContainer_Header &from);

        void MergeFrom(const InternalMessageContainer_Header &from);

        void Clear() final;

        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;

        bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream *input) final;

        void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream *output) const final;

        ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
                bool deterministic, ::google::protobuf::uint8 *target) const final;

        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();

        void SharedDtor();

        void SetCachedSize(int size) const final;

        void InternalSwap(InternalMessageContainer_Header *other);

    private:
        inline ::google::protobuf::Arena *GetArenaNoVirtual() const {
            return NULL;
        }

        inline void *MaybeArenaPtr() const {
            return NULL;
        }

    public:

        ::google::protobuf::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // string id = 1;
        void clear_id();

        static const int kIdFieldNumber = 1;

        const ::std::string &id() const;

        void set_id(const ::std::string &value);

#if LANG_CXX11

        void set_id(::std::string &&value);

#endif

        void set_id(const char *value);

        void set_id(const char *value, size_t size);

        ::std::string *mutable_id();

        ::std::string *release_id();

        void set_allocated_id(::std::string *id);

        // string socketId = 3;
        void clear_socketid();

        static const int kSocketIdFieldNumber = 3;

        const ::std::string &socketid() const;

        void set_socketid(const ::std::string &value);

#if LANG_CXX11

        void set_socketid(::std::string &&value);

#endif

        void set_socketid(const char *value);

        void set_socketid(const char *value, size_t size);

        ::std::string *mutable_socketid();

        ::std::string *release_socketid();

        void set_allocated_socketid(::std::string *socketid);

        // string partition = 4;
        void clear_partition();

        static const int kPartitionFieldNumber = 4;

        const ::std::string &partition() const;

        void set_partition(const ::std::string &value);

#if LANG_CXX11

        void set_partition(::std::string &&value);

#endif

        void set_partition(const char *value);

        void set_partition(const char *value, size_t size);

        ::std::string *mutable_partition();

        ::std::string *release_partition();

        void set_allocated_partition(::std::string *partition);

        // string userId = 5;
        void clear_userid();

        static const int kUserIdFieldNumber = 5;

        const ::std::string &userid() const;

        void set_userid(const ::std::string &value);

#if LANG_CXX11

        void set_userid(::std::string &&value);

#endif

        void set_userid(const char *value);

        void set_userid(const char *value, size_t size);

        ::std::string *mutable_userid();

        ::std::string *release_userid();

        void set_allocated_userid(::std::string *userid);

        // .proto.ActionMap actionId = 2;
        void clear_actionid();

        static const int kActionIdFieldNumber = 2;

        ::proto::ActionMap actionid() const;

        void set_actionid(::proto::ActionMap value);

        // @@protoc_insertion_point(class_scope:proto.InternalMessageContainer.Header)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        ::google::protobuf::internal::ArenaStringPtr id_;
        ::google::protobuf::internal::ArenaStringPtr socketid_;
        ::google::protobuf::internal::ArenaStringPtr partition_;
        ::google::protobuf::internal::ArenaStringPtr userid_;
        int actionid_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        friend struct ::protobuf_proto_2fMessageContainer_2eproto::TableStruct;
    };
// -------------------------------------------------------------------

    class InternalMessageContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InternalMessageContainer) */ {
    public:
        InternalMessageContainer();

        virtual ~InternalMessageContainer();

        InternalMessageContainer(const InternalMessageContainer &from);

        inline InternalMessageContainer &operator=(const InternalMessageContainer &from) {
            CopyFrom(from);
            return *this;
        }

#if LANG_CXX11

        InternalMessageContainer(InternalMessageContainer &&from) noexcept
                : InternalMessageContainer() {
            *this = ::std::move(from);
        }

        inline InternalMessageContainer &operator=(InternalMessageContainer &&from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

#endif

        static const ::google::protobuf::Descriptor *descriptor();

        static const InternalMessageContainer &default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const InternalMessageContainer *internal_default_instance() {
            return reinterpret_cast<const InternalMessageContainer *>(
                    &_InternalMessageContainer_default_instance_);
        }

        static constexpr int kIndexInFileMessages =
                3;

        void Swap(InternalMessageContainer *other);

        friend void swap(InternalMessageContainer &a, InternalMessageContainer &b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline InternalMessageContainer *New() const final {
            return CreateMaybeMessage <InternalMessageContainer>(NULL);
        }

        InternalMessageContainer *New(::google::protobuf::Arena *arena) const final {
            return CreateMaybeMessage <InternalMessageContainer>(arena);
        }

        void CopyFrom(const ::google::protobuf::Message &from) final;

        void MergeFrom(const ::google::protobuf::Message &from) final;

        void CopyFrom(const InternalMessageContainer &from);

        void MergeFrom(const InternalMessageContainer &from);

        void Clear() final;

        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;

        bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream *input) final;

        void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream *output) const final;

        ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
                bool deterministic, ::google::protobuf::uint8 *target) const final;

        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();

        void SharedDtor();

        void SetCachedSize(int size) const final;

        void InternalSwap(InternalMessageContainer *other);

    private:
        inline ::google::protobuf::Arena *GetArenaNoVirtual() const {
            return NULL;
        }

        inline void *MaybeArenaPtr() const {
            return NULL;
        }

    public:

        ::google::protobuf::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        typedef InternalMessageContainer_Header Header;

        // accessors -------------------------------------------------------

        // bytes message = 4;
        void clear_message();

        static const int kMessageFieldNumber = 4;

        const ::std::string &message() const;

        void set_message(const ::std::string &value);

#if LANG_CXX11

        void set_message(::std::string &&value);

#endif

        void set_message(const char *value);

        void set_message(const void *value, size_t size);

        ::std::string *mutable_message();

        ::std::string *release_message();

        void set_allocated_message(::std::string *message);

        // .proto.InternalMessageContainer.Header header = 2;
        bool has_header() const;

        void clear_header();

        static const int kHeaderFieldNumber = 2;
    private:
        const ::proto::InternalMessageContainer_Header &_internal_header() const;

    public:
        const ::proto::InternalMessageContainer_Header &header() const;

        ::proto::InternalMessageContainer_Header *release_header();

        ::proto::InternalMessageContainer_Header *mutable_header();

        void set_allocated_header(::proto::InternalMessageContainer_Header *header);

        // @@protoc_insertion_point(class_scope:proto.InternalMessageContainer)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        ::google::protobuf::internal::ArenaStringPtr message_;
        ::proto::InternalMessageContainer_Header *header_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        friend struct ::protobuf_proto_2fMessageContainer_2eproto::TableStruct;
    };
// -------------------------------------------------------------------

    class Ack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Ack) */ {
    public:
        Ack();

        virtual ~Ack();

        Ack(const Ack &from);

        inline Ack &operator=(const Ack &from) {
            CopyFrom(from);
            return *this;
        }

#if LANG_CXX11

        Ack(Ack &&from) noexcept
                : Ack() {
            *this = ::std::move(from);
        }

        inline Ack &operator=(Ack &&from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

#endif

        static const ::google::protobuf::Descriptor *descriptor();

        static const Ack &default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const Ack *internal_default_instance() {
            return reinterpret_cast<const Ack *>(
                    &_Ack_default_instance_);
        }

        static constexpr int kIndexInFileMessages =
                4;

        void Swap(Ack *other);

        friend void swap(Ack &a, Ack &b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline Ack *New() const final {
            return CreateMaybeMessage <Ack>(NULL);
        }

        Ack *New(::google::protobuf::Arena *arena) const final {
            return CreateMaybeMessage <Ack>(arena);
        }

        void CopyFrom(const ::google::protobuf::Message &from) final;

        void MergeFrom(const ::google::protobuf::Message &from) final;

        void CopyFrom(const Ack &from);

        void MergeFrom(const Ack &from);

        void Clear() final;

        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;

        bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream *input) final;

        void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream *output) const final;

        ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
                bool deterministic, ::google::protobuf::uint8 *target) const final;

        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();

        void SharedDtor();

        void SetCachedSize(int size) const final;

        void InternalSwap(Ack *other);

    private:
        inline ::google::protobuf::Arena *GetArenaNoVirtual() const {
            return NULL;
        }

        inline void *MaybeArenaPtr() const {
            return NULL;
        }

    public:

        ::google::protobuf::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // string id = 1;
        void clear_id();

        static const int kIdFieldNumber = 1;

        const ::std::string &id() const;

        void set_id(const ::std::string &value);

#if LANG_CXX11

        void set_id(::std::string &&value);

#endif

        void set_id(const char *value);

        void set_id(const char *value, size_t size);

        ::std::string *mutable_id();

        ::std::string *release_id();

        void set_allocated_id(::std::string *id);

        // @@protoc_insertion_point(class_scope:proto.Ack)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        ::google::protobuf::internal::ArenaStringPtr id_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        friend struct ::protobuf_proto_2fMessageContainer_2eproto::TableStruct;
    };
// -------------------------------------------------------------------

    class Ping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Ping) */ {
    public:
        Ping();

        virtual ~Ping();

        Ping(const Ping &from);

        inline Ping &operator=(const Ping &from) {
            CopyFrom(from);
            return *this;
        }

#if LANG_CXX11

        Ping(Ping &&from) noexcept
                : Ping() {
            *this = ::std::move(from);
        }

        inline Ping &operator=(Ping &&from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

#endif

        static const ::google::protobuf::Descriptor *descriptor();

        static const Ping &default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const Ping *internal_default_instance() {
            return reinterpret_cast<const Ping *>(
                    &_Ping_default_instance_);
        }

        static constexpr int kIndexInFileMessages =
                5;

        void Swap(Ping *other);

        friend void swap(Ping &a, Ping &b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline Ping *New() const final {
            return CreateMaybeMessage <Ping>(NULL);
        }

        Ping *New(::google::protobuf::Arena *arena) const final {
            return CreateMaybeMessage <Ping>(arena);
        }

        void CopyFrom(const ::google::protobuf::Message &from) final;

        void MergeFrom(const ::google::protobuf::Message &from) final;

        void CopyFrom(const Ping &from);

        void MergeFrom(const Ping &from);

        void Clear() final;

        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;

        bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream *input) final;

        void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream *output) const final;

        ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
                bool deterministic, ::google::protobuf::uint8 *target) const final;

        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();

        void SharedDtor();

        void SetCachedSize(int size) const final;

        void InternalSwap(Ping *other);

    private:
        inline ::google::protobuf::Arena *GetArenaNoVirtual() const {
            return NULL;
        }

        inline void *MaybeArenaPtr() const {
            return NULL;
        }

    public:

        ::google::protobuf::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // int32 time = 1;
        void clear_time();

        static const int kTimeFieldNumber = 1;

        ::google::protobuf::int32 time() const;

        void set_time(::google::protobuf::int32 value);

        // @@protoc_insertion_point(class_scope:proto.Ping)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        ::google::protobuf::int32 time_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        friend struct ::protobuf_proto_2fMessageContainer_2eproto::TableStruct;
    };
// -------------------------------------------------------------------

    class Pong : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Pong) */ {
    public:
        Pong();

        virtual ~Pong();

        Pong(const Pong &from);

        inline Pong &operator=(const Pong &from) {
            CopyFrom(from);
            return *this;
        }

#if LANG_CXX11

        Pong(Pong &&from) noexcept
                : Pong() {
            *this = ::std::move(from);
        }

        inline Pong &operator=(Pong &&from) noexcept {
            if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
                if (this != &from) InternalSwap(&from);
            } else {
                CopyFrom(from);
            }
            return *this;
        }

#endif

        static const ::google::protobuf::Descriptor *descriptor();

        static const Pong &default_instance();

        static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
        static inline const Pong *internal_default_instance() {
            return reinterpret_cast<const Pong *>(
                    &_Pong_default_instance_);
        }

        static constexpr int kIndexInFileMessages =
                6;

        void Swap(Pong *other);

        friend void swap(Pong &a, Pong &b) {
            a.Swap(&b);
        }

        // implements Message ----------------------------------------------

        inline Pong *New() const final {
            return CreateMaybeMessage <Pong>(NULL);
        }

        Pong *New(::google::protobuf::Arena *arena) const final {
            return CreateMaybeMessage <Pong>(arena);
        }

        void CopyFrom(const ::google::protobuf::Message &from) final;

        void MergeFrom(const ::google::protobuf::Message &from) final;

        void CopyFrom(const Pong &from);

        void MergeFrom(const Pong &from);

        void Clear() final;

        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;

        bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream *input) final;

        void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream *output) const final;

        ::google::protobuf::uint8 *InternalSerializeWithCachedSizesToArray(
                bool deterministic, ::google::protobuf::uint8 *target) const final;

        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();

        void SharedDtor();

        void SetCachedSize(int size) const final;

        void InternalSwap(Pong *other);

    private:
        inline ::google::protobuf::Arena *GetArenaNoVirtual() const {
            return NULL;
        }

        inline void *MaybeArenaPtr() const {
            return NULL;
        }

    public:

        ::google::protobuf::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // int32 time = 1;
        void clear_time();

        static const int kTimeFieldNumber = 1;

        ::google::protobuf::int32 time() const;

        void set_time(::google::protobuf::int32 value);

        // @@protoc_insertion_point(class_scope:proto.Pong)
    private:

        ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
        ::google::protobuf::int32 time_;
        mutable ::google::protobuf::internal::CachedSize _cached_size_;
        friend struct ::protobuf_proto_2fMessageContainer_2eproto::TableStruct;
    };
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageContainer_Header

// string id = 1;
    inline void MessageContainer_Header::clear_id() {
        id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline const ::std::string &MessageContainer_Header::id() const {
        // @@protoc_insertion_point(field_get:proto.MessageContainer.Header.id)
        return id_.GetNoArena();
    }

    inline void MessageContainer_Header::set_id(const ::std::string &value) {

        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:proto.MessageContainer.Header.id)
    }

#if LANG_CXX11

    inline void MessageContainer_Header::set_id(::std::string &&value) {

        id_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:proto.MessageContainer.Header.id)
    }

#endif

    inline void MessageContainer_Header::set_id(const char *value) {
                GOOGLE_DCHECK(value != NULL);

        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:proto.MessageContainer.Header.id)
    }

    inline void MessageContainer_Header::set_id(const char *value, size_t size) {

        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                       ::std::string(reinterpret_cast<const char *>(value), size));
        // @@protoc_insertion_point(field_set_pointer:proto.MessageContainer.Header.id)
    }

    inline ::std::string *MessageContainer_Header::mutable_id() {

        // @@protoc_insertion_point(field_mutable:proto.MessageContainer.Header.id)
        return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string *MessageContainer_Header::release_id() {
        // @@protoc_insertion_point(field_release:proto.MessageContainer.Header.id)

        return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline void MessageContainer_Header::set_allocated_id(::std::string *id) {
        if (id != NULL) {

        } else {

        }
        id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
        // @@protoc_insertion_point(field_set_allocated:proto.MessageContainer.Header.id)
    }

// .proto.ActionMap actionId = 2;
    inline void MessageContainer_Header::clear_actionid() {
        actionid_ = 0;
    }

    inline ::proto::ActionMap MessageContainer_Header::actionid() const {
        // @@protoc_insertion_point(field_get:proto.MessageContainer.Header.actionId)
        return static_cast< ::proto::ActionMap >(actionid_);
    }

    inline void MessageContainer_Header::set_actionid(::proto::ActionMap value) {

        actionid_ = value;
        // @@protoc_insertion_point(field_set:proto.MessageContainer.Header.actionId)
    }

// -------------------------------------------------------------------

// MessageContainer

// .proto.MessageContainer.Header header = 2;
    inline bool MessageContainer::has_header() const {
        return this != internal_default_instance() && header_ != NULL;
    }

    inline void MessageContainer::clear_header() {
        if (GetArenaNoVirtual() == NULL && header_ != NULL) {
            delete header_;
        }
        header_ = NULL;
    }

    inline const ::proto::MessageContainer_Header &MessageContainer::_internal_header() const {
        return *header_;
    }

    inline const ::proto::MessageContainer_Header &MessageContainer::header() const {
        const ::proto::MessageContainer_Header *p = header_;
        // @@protoc_insertion_point(field_get:proto.MessageContainer.header)
        return p != NULL ? *p : *reinterpret_cast<const ::proto::MessageContainer_Header *>(
                &::proto::_MessageContainer_Header_default_instance_);
    }

    inline ::proto::MessageContainer_Header *MessageContainer::release_header() {
        // @@protoc_insertion_point(field_release:proto.MessageContainer.header)

        ::proto::MessageContainer_Header *temp = header_;
        header_ = NULL;
        return temp;
    }

    inline ::proto::MessageContainer_Header *MessageContainer::mutable_header() {

        if (header_ == NULL) {
            auto *p = CreateMaybeMessage <::proto::MessageContainer_Header>(GetArenaNoVirtual());
            header_ = p;
        }
        // @@protoc_insertion_point(field_mutable:proto.MessageContainer.header)
        return header_;
    }

    inline void MessageContainer::set_allocated_header(::proto::MessageContainer_Header *header) {
        ::google::protobuf::Arena *message_arena = GetArenaNoVirtual();
        if (message_arena == NULL) {
            delete header_;
        }
        if (header) {
            ::google::protobuf::Arena *submessage_arena = NULL;
            if (message_arena != submessage_arena) {
                header = ::google::protobuf::internal::GetOwnedMessage(
                        message_arena, header, submessage_arena);
            }

        } else {

        }
        header_ = header;
        // @@protoc_insertion_point(field_set_allocated:proto.MessageContainer.header)
    }

// bytes message = 3;
    inline void MessageContainer::clear_message() {
        message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline const ::std::string &MessageContainer::message() const {
        // @@protoc_insertion_point(field_get:proto.MessageContainer.message)
        return message_.GetNoArena();
    }

    inline void MessageContainer::set_message(const ::std::string &value) {

        message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:proto.MessageContainer.message)
    }

#if LANG_CXX11

    inline void MessageContainer::set_message(::std::string &&value) {

        message_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:proto.MessageContainer.message)
    }

#endif

    inline void MessageContainer::set_message(const char *value) {
                GOOGLE_DCHECK(value != NULL);

        message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:proto.MessageContainer.message)
    }

    inline void MessageContainer::set_message(const void *value, size_t size) {

        message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                            ::std::string(reinterpret_cast<const char *>(value), size));
        // @@protoc_insertion_point(field_set_pointer:proto.MessageContainer.message)
    }

    inline ::std::string *MessageContainer::mutable_message() {

        // @@protoc_insertion_point(field_mutable:proto.MessageContainer.message)
        return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string *MessageContainer::release_message() {
        // @@protoc_insertion_point(field_release:proto.MessageContainer.message)

        return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline void MessageContainer::set_allocated_message(::std::string *message) {
        if (message != NULL) {

        } else {

        }
        message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
        // @@protoc_insertion_point(field_set_allocated:proto.MessageContainer.message)
    }

// -------------------------------------------------------------------

// InternalMessageContainer_Header

// string id = 1;
    inline void InternalMessageContainer_Header::clear_id() {
        id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline const ::std::string &InternalMessageContainer_Header::id() const {
        // @@protoc_insertion_point(field_get:proto.InternalMessageContainer.Header.id)
        return id_.GetNoArena();
    }

    inline void InternalMessageContainer_Header::set_id(const ::std::string &value) {

        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:proto.InternalMessageContainer.Header.id)
    }

#if LANG_CXX11

    inline void InternalMessageContainer_Header::set_id(::std::string &&value) {

        id_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:proto.InternalMessageContainer.Header.id)
    }

#endif

    inline void InternalMessageContainer_Header::set_id(const char *value) {
                GOOGLE_DCHECK(value != NULL);

        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:proto.InternalMessageContainer.Header.id)
    }

    inline void InternalMessageContainer_Header::set_id(const char *value, size_t size) {

        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                       ::std::string(reinterpret_cast<const char *>(value), size));
        // @@protoc_insertion_point(field_set_pointer:proto.InternalMessageContainer.Header.id)
    }

    inline ::std::string *InternalMessageContainer_Header::mutable_id() {

        // @@protoc_insertion_point(field_mutable:proto.InternalMessageContainer.Header.id)
        return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string *InternalMessageContainer_Header::release_id() {
        // @@protoc_insertion_point(field_release:proto.InternalMessageContainer.Header.id)

        return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline void InternalMessageContainer_Header::set_allocated_id(::std::string *id) {
        if (id != NULL) {

        } else {

        }
        id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
        // @@protoc_insertion_point(field_set_allocated:proto.InternalMessageContainer.Header.id)
    }

// .proto.ActionMap actionId = 2;
    inline void InternalMessageContainer_Header::clear_actionid() {
        actionid_ = 0;
    }

    inline ::proto::ActionMap InternalMessageContainer_Header::actionid() const {
        // @@protoc_insertion_point(field_get:proto.InternalMessageContainer.Header.actionId)
        return static_cast< ::proto::ActionMap >(actionid_);
    }

    inline void InternalMessageContainer_Header::set_actionid(::proto::ActionMap value) {

        actionid_ = value;
        // @@protoc_insertion_point(field_set:proto.InternalMessageContainer.Header.actionId)
    }

// string socketId = 3;
    inline void InternalMessageContainer_Header::clear_socketid() {
        socketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline const ::std::string &InternalMessageContainer_Header::socketid() const {
        // @@protoc_insertion_point(field_get:proto.InternalMessageContainer.Header.socketId)
        return socketid_.GetNoArena();
    }

    inline void InternalMessageContainer_Header::set_socketid(const ::std::string &value) {

        socketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:proto.InternalMessageContainer.Header.socketId)
    }

#if LANG_CXX11

    inline void InternalMessageContainer_Header::set_socketid(::std::string &&value) {

        socketid_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:proto.InternalMessageContainer.Header.socketId)
    }

#endif

    inline void InternalMessageContainer_Header::set_socketid(const char *value) {
                GOOGLE_DCHECK(value != NULL);

        socketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:proto.InternalMessageContainer.Header.socketId)
    }

    inline void InternalMessageContainer_Header::set_socketid(const char *value, size_t size) {

        socketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                             ::std::string(reinterpret_cast<const char *>(value), size));
        // @@protoc_insertion_point(field_set_pointer:proto.InternalMessageContainer.Header.socketId)
    }

    inline ::std::string *InternalMessageContainer_Header::mutable_socketid() {

        // @@protoc_insertion_point(field_mutable:proto.InternalMessageContainer.Header.socketId)
        return socketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string *InternalMessageContainer_Header::release_socketid() {
        // @@protoc_insertion_point(field_release:proto.InternalMessageContainer.Header.socketId)

        return socketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline void InternalMessageContainer_Header::set_allocated_socketid(::std::string *socketid) {
        if (socketid != NULL) {

        } else {

        }
        socketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), socketid);
        // @@protoc_insertion_point(field_set_allocated:proto.InternalMessageContainer.Header.socketId)
    }

// string partition = 4;
    inline void InternalMessageContainer_Header::clear_partition() {
        partition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline const ::std::string &InternalMessageContainer_Header::partition() const {
        // @@protoc_insertion_point(field_get:proto.InternalMessageContainer.Header.partition)
        return partition_.GetNoArena();
    }

    inline void InternalMessageContainer_Header::set_partition(const ::std::string &value) {

        partition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:proto.InternalMessageContainer.Header.partition)
    }

#if LANG_CXX11

    inline void InternalMessageContainer_Header::set_partition(::std::string &&value) {

        partition_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:proto.InternalMessageContainer.Header.partition)
    }

#endif

    inline void InternalMessageContainer_Header::set_partition(const char *value) {
                GOOGLE_DCHECK(value != NULL);

        partition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:proto.InternalMessageContainer.Header.partition)
    }

    inline void InternalMessageContainer_Header::set_partition(const char *value, size_t size) {

        partition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                              ::std::string(reinterpret_cast<const char *>(value), size));
        // @@protoc_insertion_point(field_set_pointer:proto.InternalMessageContainer.Header.partition)
    }

    inline ::std::string *InternalMessageContainer_Header::mutable_partition() {

        // @@protoc_insertion_point(field_mutable:proto.InternalMessageContainer.Header.partition)
        return partition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string *InternalMessageContainer_Header::release_partition() {
        // @@protoc_insertion_point(field_release:proto.InternalMessageContainer.Header.partition)

        return partition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline void InternalMessageContainer_Header::set_allocated_partition(::std::string *partition) {
        if (partition != NULL) {

        } else {

        }
        partition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), partition);
        // @@protoc_insertion_point(field_set_allocated:proto.InternalMessageContainer.Header.partition)
    }

// string userId = 5;
    inline void InternalMessageContainer_Header::clear_userid() {
        userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline const ::std::string &InternalMessageContainer_Header::userid() const {
        // @@protoc_insertion_point(field_get:proto.InternalMessageContainer.Header.userId)
        return userid_.GetNoArena();
    }

    inline void InternalMessageContainer_Header::set_userid(const ::std::string &value) {

        userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:proto.InternalMessageContainer.Header.userId)
    }

#if LANG_CXX11

    inline void InternalMessageContainer_Header::set_userid(::std::string &&value) {

        userid_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:proto.InternalMessageContainer.Header.userId)
    }

#endif

    inline void InternalMessageContainer_Header::set_userid(const char *value) {
                GOOGLE_DCHECK(value != NULL);

        userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:proto.InternalMessageContainer.Header.userId)
    }

    inline void InternalMessageContainer_Header::set_userid(const char *value, size_t size) {

        userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                           ::std::string(reinterpret_cast<const char *>(value), size));
        // @@protoc_insertion_point(field_set_pointer:proto.InternalMessageContainer.Header.userId)
    }

    inline ::std::string *InternalMessageContainer_Header::mutable_userid() {

        // @@protoc_insertion_point(field_mutable:proto.InternalMessageContainer.Header.userId)
        return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string *InternalMessageContainer_Header::release_userid() {
        // @@protoc_insertion_point(field_release:proto.InternalMessageContainer.Header.userId)

        return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline void InternalMessageContainer_Header::set_allocated_userid(::std::string *userid) {
        if (userid != NULL) {

        } else {

        }
        userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
        // @@protoc_insertion_point(field_set_allocated:proto.InternalMessageContainer.Header.userId)
    }

// -------------------------------------------------------------------

// InternalMessageContainer

// .proto.InternalMessageContainer.Header header = 2;
    inline bool InternalMessageContainer::has_header() const {
        return this != internal_default_instance() && header_ != NULL;
    }

    inline void InternalMessageContainer::clear_header() {
        if (GetArenaNoVirtual() == NULL && header_ != NULL) {
            delete header_;
        }
        header_ = NULL;
    }

    inline const ::proto::InternalMessageContainer_Header &InternalMessageContainer::_internal_header() const {
        return *header_;
    }

    inline const ::proto::InternalMessageContainer_Header &InternalMessageContainer::header() const {
        const ::proto::InternalMessageContainer_Header *p = header_;
        // @@protoc_insertion_point(field_get:proto.InternalMessageContainer.header)
        return p != NULL ? *p : *reinterpret_cast<const ::proto::InternalMessageContainer_Header *>(
                &::proto::_InternalMessageContainer_Header_default_instance_);
    }

    inline ::proto::InternalMessageContainer_Header *InternalMessageContainer::release_header() {
        // @@protoc_insertion_point(field_release:proto.InternalMessageContainer.header)

        ::proto::InternalMessageContainer_Header *temp = header_;
        header_ = NULL;
        return temp;
    }

    inline ::proto::InternalMessageContainer_Header *InternalMessageContainer::mutable_header() {

        if (header_ == NULL) {
            auto *p = CreateMaybeMessage <::proto::InternalMessageContainer_Header>(GetArenaNoVirtual());
            header_ = p;
        }
        // @@protoc_insertion_point(field_mutable:proto.InternalMessageContainer.header)
        return header_;
    }

    inline void InternalMessageContainer::set_allocated_header(::proto::InternalMessageContainer_Header *header) {
        ::google::protobuf::Arena *message_arena = GetArenaNoVirtual();
        if (message_arena == NULL) {
            delete header_;
        }
        if (header) {
            ::google::protobuf::Arena *submessage_arena = NULL;
            if (message_arena != submessage_arena) {
                header = ::google::protobuf::internal::GetOwnedMessage(
                        message_arena, header, submessage_arena);
            }

        } else {

        }
        header_ = header;
        // @@protoc_insertion_point(field_set_allocated:proto.InternalMessageContainer.header)
    }

// bytes message = 4;
    inline void InternalMessageContainer::clear_message() {
        message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline const ::std::string &InternalMessageContainer::message() const {
        // @@protoc_insertion_point(field_get:proto.InternalMessageContainer.message)
        return message_.GetNoArena();
    }

    inline void InternalMessageContainer::set_message(const ::std::string &value) {

        message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:proto.InternalMessageContainer.message)
    }

#if LANG_CXX11

    inline void InternalMessageContainer::set_message(::std::string &&value) {

        message_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:proto.InternalMessageContainer.message)
    }

#endif

    inline void InternalMessageContainer::set_message(const char *value) {
                GOOGLE_DCHECK(value != NULL);

        message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:proto.InternalMessageContainer.message)
    }

    inline void InternalMessageContainer::set_message(const void *value, size_t size) {

        message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                            ::std::string(reinterpret_cast<const char *>(value), size));
        // @@protoc_insertion_point(field_set_pointer:proto.InternalMessageContainer.message)
    }

    inline ::std::string *InternalMessageContainer::mutable_message() {

        // @@protoc_insertion_point(field_mutable:proto.InternalMessageContainer.message)
        return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string *InternalMessageContainer::release_message() {
        // @@protoc_insertion_point(field_release:proto.InternalMessageContainer.message)

        return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline void InternalMessageContainer::set_allocated_message(::std::string *message) {
        if (message != NULL) {

        } else {

        }
        message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
        // @@protoc_insertion_point(field_set_allocated:proto.InternalMessageContainer.message)
    }

// -------------------------------------------------------------------

// Ack

// string id = 1;
    inline void Ack::clear_id() {
        id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline const ::std::string &Ack::id() const {
        // @@protoc_insertion_point(field_get:proto.Ack.id)
        return id_.GetNoArena();
    }

    inline void Ack::set_id(const ::std::string &value) {

        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
        // @@protoc_insertion_point(field_set:proto.Ack.id)
    }

#if LANG_CXX11

    inline void Ack::set_id(::std::string &&value) {

        id_.SetNoArena(
                &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
        // @@protoc_insertion_point(field_set_rvalue:proto.Ack.id)
    }

#endif

    inline void Ack::set_id(const char *value) {
                GOOGLE_DCHECK(value != NULL);

        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
        // @@protoc_insertion_point(field_set_char:proto.Ack.id)
    }

    inline void Ack::set_id(const char *value, size_t size) {

        id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                       ::std::string(reinterpret_cast<const char *>(value), size));
        // @@protoc_insertion_point(field_set_pointer:proto.Ack.id)
    }

    inline ::std::string *Ack::mutable_id() {

        // @@protoc_insertion_point(field_mutable:proto.Ack.id)
        return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline ::std::string *Ack::release_id() {
        // @@protoc_insertion_point(field_release:proto.Ack.id)

        return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }

    inline void Ack::set_allocated_id(::std::string *id) {
        if (id != NULL) {

        } else {

        }
        id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
        // @@protoc_insertion_point(field_set_allocated:proto.Ack.id)
    }

// -------------------------------------------------------------------

// Ping

// int32 time = 1;
    inline void Ping::clear_time() {
        time_ = 0;
    }

    inline ::google::protobuf::int32 Ping::time() const {
        // @@protoc_insertion_point(field_get:proto.Ping.time)
        return time_;
    }

    inline void Ping::set_time(::google::protobuf::int32 value) {

        time_ = value;
        // @@protoc_insertion_point(field_set:proto.Ping.time)
    }

// -------------------------------------------------------------------

// Pong

// int32 time = 1;
    inline void Pong::clear_time() {
        time_ = 0;
    }

    inline ::google::protobuf::int32 Pong::time() const {
        // @@protoc_insertion_point(field_get:proto.Pong.time)
        return time_;
    }

    inline void Pong::set_time(::google::protobuf::int32 value) {

        time_ = value;
        // @@protoc_insertion_point(field_set:proto.Pong.time)
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fMessageContainer_2eproto
